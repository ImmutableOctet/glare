#pragma once

#include "types.hpp"
#include "input_state.hpp"

#include <engine/service_originated_event.hpp>
#include <util/variant.hpp>

namespace app::input
{
	struct MouseState;
	struct KeyboardState;
	struct GamepadState;
}

namespace engine
{
	// Abstract base-type for input events; handles input sources, etc.
	// NOTE: This is not triggered directly, or through event-aliasing.
	struct InputEvent : public ServiceOriginatedEvent
	{
		// Utility function for retrieving the index of a (wrapped) type within `InputSource`.
		template <typename ActualType>
		static constexpr std::size_t input_source_index()
		{
			return util::variant_index<InputSource, std::reference_wrapper<ActualType>>();
		}

		static constexpr std::size_t UnknownIndex  = util::variant_index<InputSource, std::monostate>(); // 0;

		static constexpr std::size_t MouseIndex    = input_source_index<app::input::Mouse>();
		static constexpr std::size_t KeyboardIndex = input_source_index<app::input::Keyboard>();
		static constexpr std::size_t GamepadIndex  = input_source_index<app::input::Gamepad>();
		static constexpr std::size_t NetworkIndex  = input_source_index<NetworkInputSource>();

		// Returns a pointer to the mouse input device that generated this event.
		// If this event was not generated by a mouse, this will return `nullptr`.
		const app::input::Mouse*        get_mouse() const;

		// Returns a pointer to the keyboard input device that generated this event.
		// If this event was not generated by a keyboard, this will return `nullptr`.
		const app::input::Keyboard*  get_keyboard() const;

		// Returns a pointer to the gamepad input device that generated this event.
		// If this event was not generated by a gamepad, this will return `nullptr`.
		const app::input::Gamepad*    get_gamepad() const;

		// Returns a temporary pointer to the mouse's input state.
		// NOTE: This returns `nullptr` if this event was not generated by a mouse.
		const app::input::MouseState*       get_mouse_state() const;

		// Returns a temporary pointer to the keyboard's input state.
		// NOTE: This returns `nullptr` if this event was not generated by a keyboard.
		const app::input::KeyboardState* get_keyboard_state() const;

		// Returns a temporary pointer to the gamepad's input state.
		// NOTE: This returns `nullptr` if this event was not generated by a gamepad.
		const app::input::GamepadState*   get_gamepad_state() const;

		// Indicates if this event was generated by a mouse device.
		bool is_mouse_event() const;

		// Indicates if this event was generated by a keyboard device.
		bool is_keyboard_event() const;

		// Indicates if this event was generated by a gamepad device.
		bool is_gamepad_event() const;

		// Indicates whether the input source is unknown.
		bool is_monostate_event() const;

		// Indicates whether `SourceType` matches the input source.
		// `SourceType` must be one of the wrapped types in `InputSource`.
		template <typename SourceType>
		inline bool source_is() const
		{
			return (source_index() == input_source_index<SourceType>());
		}

		// Indicates whether the input source is known.
		inline bool has_known_input_source() const { return !is_monostate_event(); }

		// Indicates whether the input source is unknown.
		inline bool has_unknown_input_source() const { return is_monostate_event(); }

		// An alias to the `state_index` field; represents the player that caused this input event.
		inline PlayerIndex player_index() const { return static_cast<PlayerIndex>(state_index); }

		// Indicates the internal variant-index of `source`.
		std::size_t source_index() const;

		// TODO: Look into adding a timestamp field to this.

		// A variant type indicating which input device triggered this event.
		InputSource source;

		// The state-index (player) this input originated from.
		InputStateIndex state_index;

		// TODO: Look into whether this should be a copy, or a const reference to `InputSystem`'s state. (Revisit later)
		// A copy of the high-level input state at the time of this event.
		InputState state;
	};
}